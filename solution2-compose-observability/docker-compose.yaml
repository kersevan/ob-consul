x-logging: &default-logging
  driver: fluentd
  options:
    tag: "docker.{{.Name}}"
    fluentd-address: outbrain_fluent-bit:24224
    fluentd-async: "true"

x-healthcheck: &default-healthcheck
  interval: 10s
  timeout: 5s
  retries: 3
  start_period: 10s

x-resources: &default-resources
  limits:
    cpus: '0.50'
    memory: 512M
  reservations:
    cpus: '0.25'
    memory: 256M

services:
  outbrain_consul_node1:
    image: ${CONSUL_DOCKER_IMAGE}
    container_name: outbrain_consul_node1
    ports:
      - "8500:8500" # Consul UI
      - "8600:8600/udp" # DNS Interface
    volumes:
      - ./consul/config-nodes/node1.json:/consul/config/config-nodes/node1.json
      - ./consul/config-services:/consul/config-services
    command: agent -server -ui -config-file=/consul/config/config-nodes/node1.json -config-dir=/consul/config-services
    networks:
      - outbrain
    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - CONSUL_DISABLE_UPDATE_CHECK=true
      - CONSUL_CONNECT_ENABLED=true # Enable Connect service mesh
      - CONSUL_ALLOW_PRIVILEGED_PORTS=true
    healthcheck:
      <<: *default-healthcheck
      test: [ "CMD", "curl", "-f", "http://localhost:8500/v1/status/leader" ]
    restart: unless-stopped
    logging: *default-logging
    deploy:
      resources: *default-resources
    depends_on:
      outbrain_fluent-bit:
        condition: service_healthy

  outbrain_consul_node2:
    image: ${CONSUL_DOCKER_IMAGE}
    container_name: outbrain_consul_node2
    volumes:
      - ./consul/config-nodes/node2.json:/consul/config/config-nodes/node2.json
      - ./consul/config-services:/consul/config-services
    command: agent -server -config-file=/consul/config/config-nodes/node2.json -config-dir=/consul/config-services
    networks:
      - outbrain
    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - CONSUL_DISABLE_UPDATE_CHECK=true
      - CONSUL_CONNECT_ENABLED=true # Enable Connect service mesh
      - CONSUL_ALLOW_PRIVILEGED_PORTS=true
    restart: unless-stopped
    healthcheck:
      <<: *default-healthcheck
      test: [ "CMD", "consul", "members", "list" ]
    logging: *default-logging
    deploy:
      resources: *default-resources
    depends_on:
      outbrain_fluent-bit:
        condition: service_healthy

  outbrain_consul_node3:
    image: ${CONSUL_DOCKER_IMAGE}
    container_name: outbrain_consul_node3
    volumes:
      - ./consul/config-nodes/node3.json:/consul/config/config-nodes/node3.json
      - ./consul/config-services:/consul/config-services
    command: agent -server -config-file=/consul/config/config-nodes/node3.json -config-dir=/consul/config-services
    networks:
      - outbrain
    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - CONSUL_DISABLE_UPDATE_CHECK=true
      - CONSUL_CONNECT_ENABLED=true # Enable Connect service mesh
      - CONSUL_ALLOW_PRIVILEGED_PORTS=true
    restart: unless-stopped
    healthcheck:
      <<: *default-healthcheck
      test: [ "CMD", "consul", "members", "list" ]
    logging: *default-logging
    deploy:
      resources: *default-resources
    depends_on:
      outbrain_fluent-bit:
        condition: service_healthy

  outbrain_consul_node4:
    image: ${CONSUL_DOCKER_IMAGE}
    container_name: outbrain_consul_node4
    volumes:
      - ./consul/config-nodes/node4.json:/consul/config-nodes/node4.json
      - ./consul/config-services:/consul/config-services
    command: agent -server -config-file=/consul/config-nodes/node4.json -config-dir=/consul/config-services
    networks:
      - outbrain
    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - CONSUL_DISABLE_UPDATE_CHECK=true
      - CONSUL_CONNECT_ENABLED=true # Enable Connect service mesh
      - CONSUL_ALLOW_PRIVILEGED_PORTS=true
    restart: unless-stopped
    healthcheck:
      <<: *default-healthcheck
      test: [ "CMD", "consul", "members", "list" ]
    logging: *default-logging
    deploy:
      resources: *default-resources
    depends_on:
      outbrain_fluent-bit:
        condition: service_healthy

  outbrain_prometheus:
    image: ${PROMETHEUS_DOCKER_IMAGE}
    container_name: outbrain_prometheus
    networks:
      - outbrain
    volumes:
      # - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/:/etc/prometheus/
      - ./storage/prometheus-storage:/prometheus
    restart: unless-stopped
    ports:
      - 9090:9090
    healthcheck:
      <<: *default-healthcheck
      test: [ "CMD", "promtool", "check", "config", "/etc/prometheus/prometheus.yml" ]
    logging: *default-logging
    deploy:
      resources: *default-resources
    depends_on:
      outbrain_fluent-bit:
        condition: service_healthy

  outbrain_grafana:
    image: ${GRAFANA_DOCKER_IMAGE}
    container_name: outbrain_grafana
    env_file:
      - .env
      - .decrypted.secrets.env
    networks:
      - outbrain
    volumes:
      - ./storage/grafana-storage:/var/lib/grafana
      - ./grafana/datasources/:/etc/grafana/provisioning/datasources/
      - ./grafana/dashboards/:/var/lib/grafana/dashboards
      - ./grafana/provisioning/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=GF_SECURITY_ADMIN_PASSWORD
    restart: unless-stopped
    ports:
      - 3000:3000
    healthcheck:
      <<: *default-healthcheck
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
    logging: *default-logging
    deploy:
      resources: *default-resources
    depends_on:
      outbrain_fluent-bit:
        condition: service_healthy

  outbrain_fluent-bit:
    build:
      context: ./fluent-bit
      args:
        FLUENTBIT_DOCKER_IMAGE: ${FLUENTBIT_DOCKER_IMAGE}
    env_file:
      - .env
    container_name: outbrain_fluent-bit
    networks:
      - outbrain
    volumes:
      - ./fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - ./fluent-bit/parsers.conf:/fluent-bit/etc/parsers.conf:ro
      - ./fluent-bit/plugins.conf:/fluent-bit/etc/plugins.conf:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    command: [ "fluent-bit", "-c", "/fluent-bit/etc/fluent-bit.conf" ]
    ports:
      - 24224:24224
      - 2020:2020
    healthcheck:
      <<: *default-healthcheck
      test: [ "CMD", "/wget", "--quiet", "--output-document=-", "http://localhost:2020/api/v1/health" ]
    logging: *default-logging
    deploy:
      resources: *default-resources

  outbrain_cadvisor:
    image: ${CADVISOR_DOCKER_IMAGE}
    container_name: outbrain_cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg:/dev/kmsg
    privileged: true
    networks:
      - outbrain
    restart: unless-stopped
    ports:
      - 8080:8080
    logging: *default-logging
    deploy:
      resources: *default-resources

  outbrain_node-exporter:
    image: ${NODE_EXPORTER_DOCKER_IMAGE}
    container_name: outbrain_node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.systemd'
      - '--collector.processes'
    networks:
      - outbrain
    restart: unless-stopped
    ports:
      - 9100:9100
    healthcheck:
      <<: *default-healthcheck
      test: [ "CMD", "wget", "--quiet", "--output-document=-", "http://localhost:9100/metrics" ]
    logging: *default-logging

  outbrain_loki:
    image: ${LOKI_DOCKER_IMAGE}
    container_name: outbrain_loki
    user: "10001" # Loki's default user ID
    ports:
      - "3100:3100"
      - "9096:9096"
    volumes:
      - ./loki/loki-config.yml:/mnt/config/loki-config.yml:ro
      - ./storage/loki-storage:/loki:rw
      # - ./loki/wal:/wal:rw
    command: -config.file=/mnt/config/loki-config.yml -config.expand-env=true
    networks:
      - outbrain
    restart: unless-stopped
    healthcheck:
      <<: *default-healthcheck
      test: [ "CMD-SHELL", "wget --quiet --tries=1 --output-document=- http://localhost:3100/ready | grep -q -w ready || exit 1" ]
    logging: *default-logging
    deploy:
      resources: *default-resources
    depends_on:
      outbrain_fluent-bit:
        condition: service_healthy

networks:
  outbrain:
    driver: bridge
